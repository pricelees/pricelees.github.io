{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/wait","result":{"pageContext":{"currentCategory":"wait","categories":["All","level4","aws","deregister","wait","level2","Spring","API","Specification","JsonFormat","ObjectMapper","Interceptor","Exception","Welcome"],"edges":[{"node":{"id":"0dce0473-b51b-5026-b22f-32b760578a3f","excerpt":"배경 이번 글에서 다루는 deregister-targets 등의 개념은 1편에 작성되어 있습니다..ㅎㅎ 1편을 먼저 읽고 이번 글을 읽어주시면 감사하겠습니다. 지난 글에서 통계량을 이용해 deregister-targets 호출 이후 실제 트래픽 중단까지 소요되는 최대 시간을 15초로 잡았었습니다. 지난번에 계산했던 트래픽 중단까지의 시간이 15초를 초과할 확률은 0.000021% 로 극히 미미한 수준이지만, 그럼에도 발생 가능성이 있다는 찝찝함은 있었던 것 같습니다. 그래서.. aws-cli의 elbv2 API 문서를 하나씩 살펴보던 도중 wait이라는 키워드를 발견했는데요, 이번 글에서는 wait을 이용하여 기존의 불확실성을 더 개선하는 방법을 소개하겠습니다. wait API Wait until a particular condition is satisfied. Each subcommand polls an API until the listed requirement is met. 공…","fields":{"slug":"/woowacourse/level4/improving_deployment/3/"},"frontmatter":{"categories":"level4 aws deregister wait","title":"무중단 배포 과정에서의 불확실성 개선 [2] - AWS CLI의 wait API 적용","date":"November 12, 2024"}},"next":{"fields":{"slug":"/woowacourse/level4/improving_deployment/2/"}},"previous":null}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}