{"componentChunkName":"component---src-templates-blog-template-js","path":"/woowacourse/level2/Interceptor를_이용한_권한_구분/","result":{"data":{"cur":{"id":"64d93618-5412-5059-992e-0b9382425ab1","html":"<h2 id=\"배경\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BD\" aria-label=\"배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배경</h2>\n<p><a href=\"https://github.com/pricelees/spring-roomescape-member/tree/step2\">우아한테크코스의 두 번째 미션</a>에서의 새로운 요구사항은 JWT를 이용해 로그인 기능을 구현하고, 역할에 따라 접근 권한을 다르게 설정하는 것이었습니다.\n요구사항에 명시된 것은 <strong>로그인 된 회원이 직접 예약을 추가하는 기능 구현</strong>과 <strong>관리자 페이지 접근을 제한</strong>하는 것이었는데요, 이 두 가지와 더불어 <strong>관리자와 회원의 역할을 조금 더 명확하게 나누기 위해</strong> Spring Interceptor를 이용했던 경험을 기록하고자 합니다.</p>\n<p>글에서는 스프링 인터셉터를 두 가지 방식으로 구현합니다. 먼저 <strong>경로를 지정하는 방법</strong>을 사용하여 구현한 후, <strong>커스텀 어노테이션을 이용한 방법</strong>으로 개선해보겠습니다. 또한, <strong>ArgumentResolver</strong>를 사용하는 관점에 대해서도 작성하겠습니다.</p>\n<br/>\n<h2 id=\"api-분류\" style=\"position:relative;\"><a href=\"#api-%EB%B6%84%EB%A5%98\" aria-label=\"api 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API 분류</h2>\n<p>우선, 현재 있는 API를 역할별로 구분해볼 필요가 있을 것 같습니다.</p>\n<h3 id=\"1-로그인을-하지-않아도-접근-가능\" style=\"position:relative;\"><a href=\"#1-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EC%A0%91%EA%B7%BC-%EA%B0%80%EB%8A%A5\" aria-label=\"1 로그인을 하지 않아도 접근 가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 로그인을 하지 않아도 접근 가능</h3>\n<table>\n<thead>\n<tr>\n<th>Endpoint</th>\n<th>HTTP Method</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/login</td>\n<td>POST</td>\n<td>로그인 요청</td>\n</tr>\n<tr>\n<td>/themes/weekly</td>\n<td>GET</td>\n<td>접속일 기준 지난 7일간 가장 많이 예약된 테마 10개 조회</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">/themes/weekly</code> 는 인덱스 페이지에서 사용하기에 로그인이 되어있지 않아도 접근이 가능해야 합니다.</p>\n<p>(일단 간단하게 작성하기 위해 <code class=\"language-text\">/weekly</code> 를 사용했고, <code class=\"language-text\">/themes/most-reserved-last-week?count=10</code> 와 같이 더 구체화 해서 사용할 수도 있겠습니다 ㅎㅎ)</p>\n<br/>\n<h3 id=\"2-로그인-상태인-모든-회원관리자-포함\" style=\"position:relative;\"><a href=\"#2-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%83%81%ED%83%9C%EC%9D%B8-%EB%AA%A8%EB%93%A0-%ED%9A%8C%EC%9B%90%EA%B4%80%EB%A6%AC%EC%9E%90-%ED%8F%AC%ED%95%A8\" aria-label=\"2 로그인 상태인 모든 회원관리자 포함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 로그인 상태인 모든 회원(관리자 포함)</h3>\n<table>\n<thead>\n<tr>\n<th>Endpoint</th>\n<th>HTTP Method</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/reservations</td>\n<td>POST</td>\n<td>회원이 예약을 추가</td>\n</tr>\n<tr>\n<td>/times/{date}/{themeId}</td>\n<td>GET</td>\n<td>입력된 날짜와 테마에 대한 모든 예약 시간 조회</td>\n</tr>\n<tr>\n<td>/themes</td>\n<td>GET</td>\n<td>모든 테마 조회</td>\n</tr>\n<tr>\n<td>/logout</td>\n<td>POST</td>\n<td>로그아웃</td>\n</tr>\n</tbody>\n</table>\n<p>날짜와 테마에 대한 모든 예약 시간 조회 기능은 이 시간이 예약된 시간인지에 대한 정보도 포함하고 있습니다. 예약된 시간이라면 예약 창에서 해당 시간을 선택할 수 없습니다. 또한, 회원은 테마를 선택할 수 있어야 하니 전체 테마를 조회하는 API에 역시 접근이 가능해야 합니다.</p>\n<br/>\n<h3 id=\"3-관리자-전용\" style=\"position:relative;\"><a href=\"#3-%EA%B4%80%EB%A6%AC%EC%9E%90-%EC%A0%84%EC%9A%A9\" aria-label=\"3 관리자 전용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 관리자 전용</h3>\n<table>\n<thead>\n<tr>\n<th>Endpoint</th>\n<th>HTTP Method</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/reservations</td>\n<td>GET</td>\n<td>모든 예약 조회</td>\n</tr>\n<tr>\n<td>/admin/reservastions</td>\n<td>POST</td>\n<td>관리자가 예약을 추가</td>\n</tr>\n<tr>\n<td>/reservations/{id}</td>\n<td>DELETE</td>\n<td>예약 취소(삭제)</td>\n</tr>\n<tr>\n<td>/times</td>\n<td>GET</td>\n<td>모든 예약 시간 조회</td>\n</tr>\n<tr>\n<td>/times</td>\n<td>POST</td>\n<td>예약 시간 추가</td>\n</tr>\n<tr>\n<td>/times/{id}</td>\n<td>DELETE</td>\n<td>예약 시간 삭제</td>\n</tr>\n<tr>\n<td>/themes</td>\n<td>POST</td>\n<td>테마 추가</td>\n</tr>\n<tr>\n<td>/themes/{id}</td>\n<td>DELETE</td>\n<td>테마 삭제</td>\n</tr>\n<tr>\n<td>/members</td>\n<td>GET</td>\n<td>모든 회원 조회</td>\n</tr>\n</tbody>\n</table>\n<p>다음 문단에서는, 인터셉터를 적용해보기 전에 <strong>인터셉터 메서드와 호출 순서</strong>에 대해 간단하게 확인해보겠습니다😄</p>\n<br/>\n<h2 id=\"참고-인터셉터-등록-순서와-호출-순서\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EB%93%B1%EB%A1%9D-%EC%88%9C%EC%84%9C%EC%99%80-%ED%98%B8%EC%B6%9C-%EC%88%9C%EC%84%9C\" aria-label=\"참고 인터셉터 등록 순서와 호출 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(참고) 인터셉터 등록 순서와 호출 순서</h2>\n<p>스프링 인터셉터를 처음 학습하며, 여러 인터셉터가 적용된 경우 어떻게 호출될지 궁금했습니다. 이 글에서 이용한 <code class=\"language-text\">preHandle()</code> 이외에도 인터셉터 적용 시점을 결정하는 여러 메서드가 있는데, 메서드 별로 호출 순서가 다르다는 것을 확인할 수 있었습니다. 우선 간략하게 소개하자면 다음과 같습니다.</p>\n<ul>\n<li><strong>preHandle()</strong> : <strong>핸들러가 실행되기 전에 호출</strong>된다. 반환된 boolean 값이 <code class=\"language-text\">true</code>이면 핸들러를 실행합니다.</li>\n<li><strong>posthandle()</strong> : <strong>핸들러가 실행된 후, 즉 View를 생성하기 전</strong>에 호출됩니다.</li>\n<li><strong>afterCompletion()</strong> : <strong>요청이 완료되고, View가 생성된 후</strong> 호출됩니다.</li>\n</ul>\n<p>같은 경로에 대한 인터셉터를 여러개 등록하면 어떤 순서로 호출이 되는지 직접 확인해 봤습니다.</p>\n<p>우선 인터셉터와 컨트롤러 메서드는 다음과 같습니다. TestInterceptor2인 경우 출력을 “testInterceptor2: ..”로 하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testInterceptor: preHandle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span>\n                           <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testInterceptor: postHandle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testInterceptor: afterCompletion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/interceptor/test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">interceptorTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"컨트롤러 메서드 호출\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\t</code></pre></div>\n<p>이제, 인터셉터를 다음과 같이 등록하고 테스트를 해보겠습니다. 같은 경로에 TestInterceptor, 2, 3 순서로 등록하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/interceptor/test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestInterceptor2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/interceptor/test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestInterceptor3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/interceptor/test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> 인터셉터_호출_순서_확인<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/interceptor/test\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>RestAssured를 이용한 테스트에서의 출력값을 확인해보면 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">testInterceptor1<span class=\"token operator\">:</span> preHandle\ntestInterceptor2<span class=\"token operator\">:</span> preHandle\ntestInterceptor3<span class=\"token operator\">:</span> preHandle\n\n컨트롤러 메서드 호출\n\ntestInterceptor3<span class=\"token operator\">:</span> postHandle\ntestInterceptor2<span class=\"token operator\">:</span> postHandle\ntestInterceptor1<span class=\"token operator\">:</span> postHandle\n\ntestInterceptor3<span class=\"token operator\">:</span> afterCompletion\ntestInterceptor2<span class=\"token operator\">:</span> afterCompletion\ntestInterceptor1<span class=\"token operator\">:</span> afterCompletion</code></pre></div>\n<p>결론은 다음과 같습니다.</p>\n<ol>\n<li><code class=\"language-text\">preHandle → 컨트롤러 메서드 → postHandle → afterCompletion</code> 순으로 호출된다.</li>\n<li><code class=\"language-text\">preHandle()</code>의 경우 <strong>등록한 인터셉터 순서대로 호출</strong>된다.</li>\n<li><code class=\"language-text\">postHandle()</code>와 <code class=\"language-text\">afterCompletion()</code>의 경우 <strong>등록한 인터셉터의 역순</strong>으로 호출된다.</li>\n</ol>\n<br/>\n<h2 id=\"인터셉터-경로-직접-지정\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EA%B2%BD%EB%A1%9C-%EC%A7%81%EC%A0%91-%EC%A7%80%EC%A0%95\" aria-label=\"인터셉터 경로 직접 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터셉터 경로 직접 지정</h2>\n<p>이제 인터셉터를 적용 해 볼텐데요, 저는 두 가지 방법을 시도했고 그중 첫 번째 방법인 경로 지정 방법으로 먼저 구현해 보겠습니다. <strong>로그인 된 회원(관리자 포함)이 이용 가능한 API</strong>와 <strong>관리자가 이용 가능한 API</strong>를 구분하기 위해 우선 두 개의 인터셉터를 만들고, API를 호출하기 전에 인터셉터가 적용되어야 하므로, <code class=\"language-text\">preHandle()</code> 만 재정의 하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// 로그인 상태 확인 로직        </span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AdminInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// 관리자 여부 확인 로직</span>\n        \n\t  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인터셉터 적용의 편리를 위해, 위의 API 중 관리자 전용 API의 경우는 <code class=\"language-text\">/admin</code>을 추가로 붙였습니다.</p>\n<table>\n<thead>\n<tr>\n<th>수정 전</th>\n<th>수정 후</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/reservations</td>\n<td>/admin/reservations</td>\n</tr>\n<tr>\n<td>/admin/reservstions</td>\n<td>/admin/reservstions</td>\n</tr>\n<tr>\n<td>/reservations/{id}</td>\n<td>/admin/reservations/{id}</td>\n</tr>\n<tr>\n<td>/times</td>\n<td>/admin/times</td>\n</tr>\n<tr>\n<td>/times</td>\n<td>/admin/times</td>\n</tr>\n<tr>\n<td>/times/{id}</td>\n<td>/admin/times/{id}</td>\n</tr>\n<tr>\n<td>/themes</td>\n<td>/admin/themes</td>\n</tr>\n<tr>\n<td>/themes/{id}</td>\n<td>/admin/themes/{id}</td>\n</tr>\n<tr>\n<td>/members</td>\n<td>/admin/members</td>\n</tr>\n</tbody>\n</table>\n<p>인터셉터의 등록은, <code class=\"language-text\">WebMvcConfigurer</code> 를 구현한 객체를 만들고, <code class=\"language-text\">addInterceptors()</code> 를 재정의하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebMvcConfiguration</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LoginInterceptor</span> loginInterceptor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AdminInterceptor</span> adminInterceptor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WebMvcConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginInterceptor</span> loginInterceptor<span class=\"token punctuation\">,</span>\n                               <span class=\"token class-name\">AdminInterceptor</span> adminInterceptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginInterceptor <span class=\"token operator\">=</span> loginInterceptor<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>adminInterceptor <span class=\"token operator\">=</span> adminInterceptor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>loginInterceptor<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">excludePathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/themes/weekly\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">excludePathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/css/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/js/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/image/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/favicon.ico\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>adminInterceptor<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/admin/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>addPathPatterns는 인터셉터를 적용할 경로를,</p>\n</blockquote>\n<p>excludePathPatterns는 인터셉터를 적용하지 않을 경로를 지정할 때 사용합니다.</p>\n<blockquote>\n</blockquote>\n<p>우선 로그인 인터셉터를 전체 경로에 대해 적용하고 css, js 등과 로그인 하지 않아도 접근이 가능해야 하는 경로를 지정합니다. (사실 처음 구현할 때는 직접 하나씩 지정했는데, 코드 리뷰를 받을 때 리뷰어께서 <strong>전체를 등록하고 뺄 부분을 빼는 방식</strong>을 추천해주셨고 이 방식이 더 직관적이고 간결하게 느껴져서 이렇게 사용하고 있습니다.)</p>\n<p>관리자 전용 API의 Endpoint는 <code class=\"language-text\">/admin</code> 이 접두사가 되도록 수정했으니, /admin으로 시작하는 모든 경로에 관리자 인터셉터를 적용하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ParameterizedTest</span>\n<span class=\"token annotation punctuation\">@ValueSource</span><span class=\"token punctuation\">(</span>strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/themes/ranking\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/css/flatpickr.css\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/js/flatpickr.js\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> 로그인_하지_않아도_접근_가능하다<span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트는 위와 같이 RestAssured를 이용해 진행할 수 있습니다😄</p>\n<br/>\n<h3 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점</h3>\n<p>전체적으로 보면 간단한 방법인데, 지금의 방법에서 발생하는 몇몇 문제점이 있습니다.</p>\n<ol>\n<li>인터셉터는 요청 URL에 적용됩니다. 즉 HTTP 메서드에 따라 분리할 수 없습니다. 만약 <code class=\"language-text\">/reservations</code> 라는 API에 로그인 된 회원은 POST, 관리자는 GET 요청을 한다면 이를 구분할 수 없습니다.</li>\n<li>1의 문제점 때문에, 관리자 API를 <code class=\"language-text\">/admin</code> 으로 시작하도록 수정한 것인데 이렇게 하면 API를 바로 파악하기 쉽지 않습니다. 예약과 관련된 API는 모두 <code class=\"language-text\">/reservations</code> 로 통일하는게 가장 직관적인데, 지금은 관리자 예약의 경우 <code class=\"language-text\">/admin/reservations</code> 를 사용하기 때문입니다.</li>\n<li>개인적인 생각이지만, 코드를 보고 이해하기 힘들 것 같다는 생각입니다. 컨트롤러 메서드를 보고 바로 관리자 전용인지, 회원 전용인지 판단할 수 있으면 좋을 것 같습니다.</li>\n</ol>\n<p>다음 문단에선, 커스텀 어노테이션을 이용한 인터셉터로 이 문제를 해결해 보겠습니다.</p>\n<br/>\n<h2 id=\"커스텀-어노테이션과-인터셉터\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0\" aria-label=\"커스텀 어노테이션과 인터셉터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커스텀 어노테이션과 인터셉터</h2>\n<p>우선 컨트롤러 메서드에 붙일 로그인 / 관리자 어노테이션을 정의하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">LoginRequired</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AdminOnly</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>목표는, <strong>@LoginRequired</strong>가 붙은 컨트롤러 메서드는 로그인 여부를 확인하고 <strong>@AdminOnly</strong>가 붙은 컨트롤러 메서드는 관리자 여부를 확인하는 것입니다!</p>\n<p>다음으로, 이전에 정의한 <code class=\"language-text\">LoginInterceptor</code>와 <code class=\"language-text\">AdminInterceptor</code>에서 이 어노테이션을 확인하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLoginNotRequired</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t      <span class=\"token punctuation\">}</span>\n\t      \n\t      <span class=\"token comment\">// 나머지 로직(로그인 상태 확인)은 동일</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isLoginNotRequired</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HandlerMethod</span> handlerMethod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>handlerMethod<span class=\"token punctuation\">.</span><span class=\"token function\">hasMethodAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginRequired</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">isLoginNotRequired()</code> 는 <strong>로그인 확인 인터셉터를 적용할 메서드를 구분하기 위해 사용</strong>합니다. 다음의 경우에는 <code class=\"language-text\">preHandle()</code>이 <code class=\"language-text\">true</code>를 반환하도록 하여 로그인 인터셉터를 적용하지 않습니다.</p>\n<ol>\n<li>핸들러 객체가 HandlerMethod 인스턴스가 아닌 경우</li>\n<li>핸들러 객체가 HandlerMethod 인스턴스이지만 LoginRequired 어노테이션이 없는 경우</li>\n</ol>\n<p>즉, <code class=\"language-text\">isLoginNotRequired()</code> 이 false를 반환했다는 것은 이 메서드에 <code class=\"language-text\">@LoginRequired</code> 어노테이션이 있다는 것이므로 이 경우에는 로그인 상태를 확인합니다.</p>\n<p>마찬가지로, 관리자 인터셉터도 다음과 같이 수정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AdminInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isAdminNotRequired</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t      <span class=\"token punctuation\">}</span>\n\t      \n\t      <span class=\"token comment\">// 나머지 로직(관리자 여부 확인)은 동일</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAdminNotRequired</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HandlerMethod</span> handlerMethod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>handlerMethod<span class=\"token punctuation\">.</span><span class=\"token function\">hasMethodAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AdminOnly</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 인터셉터를 구현했다면, 이전의 <code class=\"language-text\">WebMvcConfiguration</code> 객체를 다음과 같이 수정합니다. 이전과 같이 구체적인 경로를 지정하지 않고, 인터셉터 자체만 등록하면 됩니다!</p>\n<blockquote>\n<p>지금은 Interceptor 내부에서 사용하는 객체가 있기 때문에 Autowired를 이용했으나, 만약 인터셉터가 별도의 필드를 가지고 있지 않다면 <code class=\"language-text\">new LoginInterceptor()</code> 와 같이 대체할 수 있습니다. (<a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-config/interceptors.html\">참고</a>)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebMvcConfiguration</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LoginInterceptor</span> loginInterceptor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AdminInterceptor</span> adminInterceptor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WebMvcConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginInterceptor</span> loginInterceptor<span class=\"token punctuation\">,</span>\n                               <span class=\"token class-name\">AdminInterceptor</span> adminInterceptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberIdResolver <span class=\"token operator\">=</span> memberIdResolver<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginInterceptor <span class=\"token operator\">=</span> loginInterceptor<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>adminInterceptor <span class=\"token operator\">=</span> adminInterceptor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>loginInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>adminInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이제 컨트롤러 메서드에 커스텀 어노테이션을 붙여 이전 문단에서 언급한 문제점을 해결해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReservationController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n\t<span class=\"token annotation punctuation\">@LoginRequired</span>\n\t<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/reservations\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token function\">createMemberReservation</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Authenticated</span> <span class=\"token class-name\">Long</span> memberId <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@AdminOnly</span>\n\t<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/reservations\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token function\">getAllReservations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전 문단에 작성한 문제점을 다시 한번 작성해 보겠습니다.</p>\n<ol>\n<li>인터셉터는 요청 URL에 적용됩니다. 즉 HTTP 메서드에 따라 분리할 수 없습니다. 만약 <code class=\"language-text\">/reservations</code> 라는 API에 로그인 된 회원은 POST, 관리자는 GET 요청을 한다면 이를 구분할 수 없습니다.\n<ul>\n<li>같은 Endpoint에 접근 권한을 나눌 수 있습니다.</li>\n</ul>\n</li>\n<li>1의 문제점 때문에, 관리자 API를 <code class=\"language-text\">/admin</code> 으로 시작하도록 수정한 것인데 이렇게 하면 <strong>API를 바로 파악하기 쉽지 않습니다.</strong> 예약과 관련된 API는 모두 <code class=\"language-text\">/reservations</code> 로 통일하는게 가장 직관적인데, 지금은 관리자 예약의 경우 <code class=\"language-text\">/admin/reservations</code> 를 사용하기 때문입니다.\n<ul>\n<li>1의 문제가 해결되었기 때문에 관리자 전용 엔드포인트를 수정할 필요가 없어졌습니다.</li>\n</ul>\n</li>\n<li>개인적인 생각이지만, 코드를 보고 이해하기 힘들 것 같다는 생각입니다. 컨트롤러 메서드를 보고 바로 관리자 전용인지, 회원 전용인지 판단할 수 있으면 좋을 것 같습니다.\n<ul>\n<li>이전에는 <code class=\"language-text\">WebMvcConfiguration</code> 에 등록된 인터셉터 적용 경로와 컨트롤러 메서드를 둘다 확인해야 했지만, 이제 컨트롤러 메서드 안에서 모두 파악할 수 있게 되었습니다.</li>\n</ul>\n</li>\n</ol>\n<br/>\n<h2 id=\"argumentresolver-사용\" style=\"position:relative;\"><a href=\"#argumentresolver-%EC%82%AC%EC%9A%A9\" aria-label=\"argumentresolver 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧐ArgumentResolver 사용?</h2>\n<p>Spring Interceptor가 아닌 ArgumentResolver를 이용하여 비슷한 방식으로 해결할 수도 있습니다. 아래의 코드처럼 <code class=\"language-text\">PARAMETER</code> 에 적용되는 어노테이션을 만들고, 이를 이용한 ArgumentResolver를 구현합니다. Admin은 말 그대로 관리자, Authenticated는 로그인 된 회원을 조회할 때 사용하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMETER</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Admin</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMETER</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authenticated</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 테마를 조회하는, 로그인이 필요한 <code class=\"language-text\">GET /themes</code> 를 예시로 들어보면 컨트롤러 메서드를 아래와 같이 구현할 수 있습니다. 인터셉터 코드는 위에서 구현한 커스텀 어노테이션 방식을 이용했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Spring Interceptor 사용</span>\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/themes\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@LoginRequired</span>\n<span class=\"token keyword\">public</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token function\">getAllThemes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ArgumentResolver 사용</span>\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/themes\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token function\">getAllThemes</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Authenticated</span> <span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 모든 접근 권한이 필요한 컨트롤러 메서드가 <code class=\"language-text\">memberId</code> 라는 값을 필요로 한다면 <code class=\"language-text\">ArgumentResolver</code>를 사용하는게 더 간단할 것이라고 생각합니다. 하지만, <code class=\"language-text\">GET /themes</code> 와 같은 요청에는 예약 추가와 같이 회원 ID를 직접적으로 사용할 일이 없고, 단순히 권한 체크에만 사용하기 때문에 Interceptor를 사용하는 것이 더 낫다고 판단했습니다.</p>\n<br/>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ol>\n<li>특정 API들에 대한 접근 권한을 분류하기 위해 Spring Interceptor를 사용할 수 있다.</li>\n<li>인터셉터를 만들고, WebMvcConfigurer에서 경로를 직접 지정할 수 있으나, 이 방법은 <strong>동일한 경로에 다른 HTTP 메서드를 사용하는 경우를 구분할 수 없다</strong>는 큰 단점이 존재한다.</li>\n<li>커스텀 어노테이션을 통해 인터셉터를 구현하는 방법으로 이 문제를 해결할 수 있다.</li>\n<li>모든 경우에 메서드 파라미터를 사용한다면 ArgumentResolver의 사용을 고려해 볼 수 있다.</li>\n</ol>\n<br/>\n<p>미션을 진행할 때는 저도 간단한 사용법만 익히고 뚜다다닥(?) 사용했었는데, 글을 작성하는 과정에서 다시 하나하나 확인해보는 즐거움이 있네요 ㅎㅎ</p>\n<p>부족하거나 잘못된 내용이 있다면 댓글에 남겨주시면 정말 감사드리겠습니다. 즐거운 하루 보내세요🙇</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B0%B0%EA%B2%BD\">배경</a></p>\n</li>\n<li>\n<p><a href=\"#api-%EB%B6%84%EB%A5%98\">API 분류</a></p>\n<ul>\n<li><a href=\"#1-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EC%A0%91%EA%B7%BC-%EA%B0%80%EB%8A%A5\">1. 로그인을 하지 않아도 접근 가능</a></li>\n<li><a href=\"#2-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%83%81%ED%83%9C%EC%9D%B8-%EB%AA%A8%EB%93%A0-%ED%9A%8C%EC%9B%90%EA%B4%80%EB%A6%AC%EC%9E%90-%ED%8F%AC%ED%95%A8\">2. 로그인 상태인 모든 회원(관리자 포함)</a></li>\n<li><a href=\"#3-%EA%B4%80%EB%A6%AC%EC%9E%90-%EC%A0%84%EC%9A%A9\">3. 관리자 전용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EB%93%B1%EB%A1%9D-%EC%88%9C%EC%84%9C%EC%99%80-%ED%98%B8%EC%B6%9C-%EC%88%9C%EC%84%9C\">(참고) 인터셉터 등록 순서와 호출 순서</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EA%B2%BD%EB%A1%9C-%EC%A7%81%EC%A0%91-%EC%A7%80%EC%A0%95\">인터셉터 경로 직접 지정</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0\">커스텀 어노테이션과 인터셉터</a></p>\n</li>\n<li>\n<p><a href=\"#argumentresolver-%EC%82%AC%EC%9A%A9\">🧐ArgumentResolver 사용?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n<ul>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"배경 우아한테크코스의 두 번째 미션에서의 새로운 요구사항은 JWT를 이용해 로그인 기능을 구현하고, 역할에 따라 접근 권한을 다르게 설정하는 것이었습니다.\n요구사항에 명시된 것은 로그인 된 회원이 직접 예약을 추가하는 기능 구현과 관리자 페이지 접근을 제한하는 것이었는데요, 이 두 가지와 더불어 관리자와 회원의 역할을 조금 더 명확하게 나누기 위해 Spring Interceptor를 이용했던 경험을 기록하고자 합니다. 글에서는 스프링 인터셉터를 두 가지 방식으로 구현합니다. 먼저 경로를 지정하는 방법을 사용하여 구현한 후, 커스텀 어노테이션을 이용한 방법으로 개선해보겠습니다. 또한, ArgumentResolver를 사용하는 관점에 대해서도 작성하겠습니다. API 분류 우선, 현재 있는 API를 역할별로 구분해볼 필요가 있을 것 같습니다. 1. 로그인을 하지 않아도 접근 가능 Endpoint HTTP Method 기능 /login POST 로그인 요청 /themes/weekly GE…","frontmatter":{"date":"June 24, 2024","title":"회원 역할에 따른 API 접근 - Spring Interceptor","categories":"level2 Spring Interceptor","author":"이상진","emoji":"🌱"},"fields":{"slug":"/woowacourse/level2/Interceptor를_이용한_권한_구분/"}},"next":{"id":"123ef134-8b01-5dbd-a496-4c27ee6102c1","html":"<h2 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h2>\n<p>드디어 마지막이네요. 처음 이 글을 작성하고자 했을 때는 3편까지 쓸 것이라는 생각을 전혀 안했는데..ㅎㅎ 최대한 간단하게 쓴다고 노력해도 역시 욕심은 끝이 없는 것 같습니다.</p>\n<p>이번에는 지난번에 학습한 JsonNode를 활용해서 Custom Deserializer를 직접 만들어 볼텐데요, JsonNode가 헷갈리신다면 <a href=\"http://pricelees.github.io/woowacourse/level2/%EC%8A%A4%ED%94%84%EB%A7%81_%EC%9E%85%EB%A0%A5%EC%97%90%EC%84%9C%EC%9D%98_%EC%98%88%EC%99%B8_%EC%B2%98%EB%A6%AC_%EC%97%AC%EC%A0%95/2/\">이전 편</a>를 확인해주시면 감사하겠습니다.🙇</p>\n<h2 id=\"해결해야-할-것\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%ED%95%B4%EC%95%BC-%ED%95%A0-%EA%B2%83\" aria-label=\"해결해야 할 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결해야 할 것</h2>\n<p>이번 Custom Deserializer를 통해 해결해야 하는 문제는, 1편의 맨 마지막에 나온 두 가지 문제입니다. 본문을 시작하기 전에 간단하게 리마인드 하고 가겠습니다 ㅎㅎ</p>\n<ol>\n<li>지금의 예외 핸들링은, 테마, 시간, 멤버를 선택하지 않았을 때 기본 입력값인 <code class=\"language-text\">“테마 선택”</code> 등에 의존합니다. <strong>즉 클라이언트 코드에 완전히 의존하는 구조입니다.</strong></li>\n<li>예약을 추가할 때 멤버, 시간, 테마 중 2개 이상의 값이 입력되지 않아도 하나의 값만 표시됩니다. 즉 <strong>입력되지 않은 모든 값을 예외 메시지에 담을 수 없습니다.</strong>\n<ul>\n<li>추가적으로, 날짜를 입력하지 않았을 때 발생하는 MethodArgumentNotValidException와 같이 묶어서 처리할 수도 없습니다!</li>\n</ul>\n</li>\n</ol>\n<p>이 문제들은 <code class=\"language-text\">1번 문제, 2번 문제</code> 로 뒤에서 언급할 예정이니 참고 부탁드립니다😄</p>\n<h2 id=\"custom-deserializer---정상-입력-처리\" style=\"position:relative;\"><a href=\"#custom-deserializer---%EC%A0%95%EC%83%81-%EC%9E%85%EB%A0%A5-%EC%B2%98%EB%A6%AC\" aria-label=\"custom deserializer   정상 입력 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Deserializer - 정상 입력 처리</h2>\n<p>예외는 나중에 생각하고, 우선 <strong>값이 정상적으로 입력되었다고 가정했을 때의 Custom Deserializer</strong>를 만들어 보겠습니다.</p>\n<h3 id=\"배경-요청-json-및-dto\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BD-%EC%9A%94%EC%B2%AD-json-%EB%B0%8F-dto\" aria-label=\"배경 요청 json 및 dto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배경: 요청 JSON 및 DTO</h3>\n<p>모든 값(회원, 테마, 날짜, 시간)을 선택했을 때의 JSON과 모든 값을 선택하지 않았을 때의 JSON, 그리고 요청 DTO를 다시 한번 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 모든 값 선택</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024-06-20\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 숫자 값은 예시입니다. </span>\n    <span class=\"token property\">\"memberId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"themeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"timeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 모든 값을 선택하지 않음.</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"memberId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"멤버 선택\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"themeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"테마 선택\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"timeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"시간 선택\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지난 1편에서 파악한 문제는 <strong>모든 값을 선택하지 않았을 때</strong>, date의 경우 <code class=\"language-text\">@NotNull</code> 에 의해 <code class=\"language-text\">MethodArgumentException</code>이, 나머지는 InvalidFormat에서 비롯된 <strong>HttpMessageNotReadableException</strong>이 발생된다는 것이었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@NotNull</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"날짜를 입력해 주세요.\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">LocalDate</span> date<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@NotNull</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"시간을 입력해 주세요.\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> timeId<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@NotNull</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"테마를 입력해 주세요.\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> themeId<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@NotNull</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"회원을 입력해 주세요.\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> memberId\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>요청 DTO는 위와 같습니다 ㅎㅎ</p>\n<h3 id=\"우선-모든-값-노드를-불러오겠습니다\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EC%84%A0-%EB%AA%A8%EB%93%A0-%EA%B0%92-%EB%85%B8%EB%93%9C%EB%A5%BC-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"우선 모든 값 노드를 불러오겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우선 모든 값 노드를 불러오겠습니다.</h3>\n<p>2편의 맨 앞에서 작성한 코드에,  값 노드들을 불러오는 코드를 추가해 보겠습니다 ㅎㅎ</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AdminReservationCreateRequestDeserializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdDeserializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// 생성자는 Baeldung에 있는 것과 동일하게 작성</span>\n\t\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">AdminReservationCreateRequest</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParser</span> jsonParser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeserializationContext</span> deserializationContext<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JacksonException</span> <span class=\"token punctuation\">{</span>\n            \n     <span class=\"token class-name\">JsonNode</span> rootNode <span class=\"token operator\">=</span> jsonParser<span class=\"token punctuation\">.</span><span class=\"token function\">getCodec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>jsonParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n     <span class=\"token class-name\">JsonNode</span> dateNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n     <span class=\"token class-name\">JsonNode</span> memberIdNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">JsonNode</span> themeIdNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"themeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">JsonNode</span> timeIdNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>2편의 내용에 따르면,</p>\n<ol>\n<li>rootNode는 <code class=\"language-text\">ContainerNode(ObjectNode)</code> 이다.</li>\n<li>나머지 date, memberId 노드는 <code class=\"language-text\">ValueNode(TextNode)</code> 이다.</li>\n</ol>\n<h3 id=\"정상-입력에-대한-custom-deserializer-마무리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%83%81-%EC%9E%85%EB%A0%A5%EC%97%90-%EB%8C%80%ED%95%9C-custom-deserializer-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"정상 입력에 대한 custom deserializer 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정상 입력에 대한 Custom Deserializer 마무리</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AdminReservationCreateRequestDeserializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdDeserializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// 생성자는 Baeldung에 있는 것과 동일하게 작성</span>\n\t\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">AdminReservationCreateRequest</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParser</span> jsonParser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeserializationContext</span> deserializationContext<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JacksonException</span> <span class=\"token punctuation\">{</span>\n            \n     <span class=\"token class-name\">JsonNode</span> rootNode <span class=\"token operator\">=</span> jsonParser<span class=\"token punctuation\">.</span><span class=\"token function\">getCodec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>jsonParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n     <span class=\"token class-name\">JsonNode</span> dateNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n     <span class=\"token class-name\">JsonNode</span> memberIdNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">JsonNode</span> themeIdNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"themeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">JsonNode</span> timeIdNode <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t <span class=\"token class-name\">LocalDate</span> date <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>dateNode<span class=\"token punctuation\">.</span><span class=\"token function\">asText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISO_LOCAL_DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t <span class=\"token class-name\">Long</span> memberId <span class=\"token operator\">=</span> memberIdNode<span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t <span class=\"token class-name\">Long</span> themeId <span class=\"token operator\">=</span> themeIdNode<span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t <span class=\"token class-name\">Long</span> timeId <span class=\"token operator\">=</span> timeIdNode<span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t \n\t\t <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> timeId<span class=\"token punctuation\">,</span> themeId<span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>값은 문자열, 숫자, 불리언 형태로만 불러올 수 있기에 날짜의 경우 문자열로 불러온 뒤 <code class=\"language-text\">LocalDate.parse</code> 를 이용했고, 나머지는 <code class=\"language-text\">asLong()</code>을 이용했습니다. 물론 처음부터 <code class=\"language-text\">rootNode.path(”date”).asText()</code> 와 같이 불러와도 됩니다.</p>\n<blockquote>\n<p>DateTimeFormatter.ISO_LOCAL_DATE는 “yyyy-MM-dd” 형태로 변환하는 상수입니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonDeserialize</span><span class=\"token punctuation\">(</span>using <span class=\"token operator\">=</span> <span class=\"token class-name\">AdminReservationCreateRequestDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">LocalDate</span> date<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Long</span> timeId<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Long</span> themeId<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Long</span> memberId\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>최종적으로, 해당 DTO 클래스에 <code class=\"language-text\">@JsonDeserialize</code>  어노테이션과 Deserializer 타입을 넣어주면 됩니다!</p>\n<h3 id=\"값을-입력하지-않는다면\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%9D%84-%EC%9E%85%EB%A0%A5%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4%EB%A9%B4\" aria-label=\"값을 입력하지 않는다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값을 입력하지 않는다면?</h3>\n<p>눈썰미가 훌륭하신 분들은 이미 파악하셨겠지만, 바로 위에 있는 AdminReservationCreateRequest 클래스 코드에서 <code class=\"language-text\">@NotNull</code>이 사라졌습니다!</p>\n<p>만약 위와 같이 구현한 Custom Deserializer를 사용할 때, 값을 입력하지 않으면 어떻게 될까요? 2편의 내용과 같이 보면 이해가 쉽습니다😄</p>\n<p><strong>date</strong></p>\n<ul>\n<li>date의 경우 선택하지 않으면 빈 문자열(<code class=\"language-text\">“”</code>)로 요청되는데, 그러면 위의 Custom Deserializer에서 <code class=\"language-text\">rootNode.path(”date”).asText()</code> 를 했을 때의 값은 <code class=\"language-text\">“”</code>가 되어 <code class=\"language-text\">LocalDate.parse</code> 에서 <code class=\"language-text\">DateTimeParseException</code>이 발생하게 됩니다.</li>\n<li>만약 요청 JSON에 “date” 필드 자체가 없다면, <code class=\"language-text\">path()</code>를 통해 값을 불러오므로, dateNode는 <code class=\"language-text\">MissingNode</code> 가 됩니다. 따라서 이 노드에 <code class=\"language-text\">asText()</code>를 호출한 값이 기본값인 빈 문자열(<code class=\"language-text\">“”</code> )이 되어 위와 동일한 <code class=\"language-text\">DateTimeParseException</code>이 발생합니다.</li>\n</ul>\n<p><strong>timeId</strong></p>\n<ul>\n<li><code class=\"language-text\">themeId, memberId</code>도 동일합니다. timeId를 기준으로 설명하겠습니다.</li>\n<li>선택하지 않으면 <code class=\"language-text\">“시간 선택”</code> 으로 요청됩니다. 따라서 timeIdNode는 “시간 선택”이라는 값을 가지는 <code class=\"language-text\">ValueNode(TextNode)</code> 가 됩니다.</li>\n<li>이 노드에 <code class=\"language-text\">asLong()</code>을 호출하면, 숫자로 변환이 안되는 경우 기본값인 0을 반환합니다.</li>\n<li>필드 자체가 없는 경우 역시 위의 date와 동일한 과정으로 기본값인 0이 됩니다.</li>\n<li>ID(DB의 PK이자 AUTO_INCREMENT)는 모두 1 이상이므로, <strong>이후의 과정에서 ID 0에 해당되는 시간을 찾을 수 없다는 예외가 발생</strong>하게 됩니다.</li>\n</ul>\n<p>따라서, <code class=\"language-text\">@NotNull</code> 어노테이션 자체가 작동되지 않습니다.</p>\n<h2 id=\"첫-번째-방법---valid-어노테이션-활용\" style=\"position:relative;\"><a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95---valid-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%99%9C%EC%9A%A9\" aria-label=\"첫 번째 방법   valid 어노테이션 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫 번째 방법 - @Valid 어노테이션 활용</h2>\n<p>우선, Custom Deserializer에 의해 <strong>1번 문제</strong>는 해결이 되었습니다. (”테마 선택”과 같은 <strong>클라이언트 코드 의존이 없습니다</strong>) 그러면 2번 문제만 해결하면 1편에서의 문제점을 해소할 수 있겠네요 ㅎㅎ</p>\n<p>첫 번째 방법은, <strong>Deserializer는 그대로 두고</strong>, <code class=\"language-text\">@Valid</code>를 활용하여 모든 예외를 <code class=\"language-text\">MethodArgumentNotValidException</code> 으로 처리하는 방법입니다.</p>\n<ul>\n<li>MethodArgumentNotValidException에 대한 처리는 1편에 있습니다.</li>\n</ul>\n<p>위에 작성한 Deserializer 코드를 다시 작성하는데, 조금 더 간결하게 작성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">AdminReservationCreateRequest</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParser</span> jsonParser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeserializationContext</span> deserializationContext<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JacksonException</span> <span class=\"token punctuation\">{</span>\n          \n   <span class=\"token class-name\">JsonNode</span> rootNode <span class=\"token operator\">=</span> jsonParser<span class=\"token punctuation\">.</span><span class=\"token function\">getCodec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>jsonParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token class-name\">String</span> date <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n   <span class=\"token class-name\">Long</span> memberId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Long</span> themeId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"themeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Long</span> timeId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t \n\t <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> timeId<span class=\"token punctuation\">,</span> themeId<span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>가장 중요한 변경 사항은, <strong>date의 타입이 String으로 변경된 것입니다</strong>. 마찬가지로 DTO의 필드 타입도 바꾸겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonDeserialize</span><span class=\"token punctuation\">(</span>using <span class=\"token operator\">=</span> <span class=\"token class-name\">AdminReservationCreateRequestDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation punctuation\">@Pattern</span><span class=\"token punctuation\">(</span>regexp <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\\d{4}-\\\\d{2}-\\\\d{2}\"</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"날짜가 입력되지 않았거나, 입력 형식이 올바르지 않아요(yyyy-MM-dd)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> date<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Min</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"회원을 입력해 주세요\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Min</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"시간을 입력해 주세요\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Long</span> timeId<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Min</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"테마를 입력해 주세요\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Long</span> themeId\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalDate</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에 확인했던 대로 <code class=\"language-text\">값이 입력되지 않으면 ID 필드의 값은 0</code>이 되기에 <code class=\"language-text\">@Min(1)</code> 으로 입력 여부를 검증할 수 있습니다.</p>\n<p>날짜는 <code class=\"language-text\">@Pattern</code>  어노테이션으로 형식을 검증합니다. 날짜가 선택되지 않거나 필드가 없어 빈 문자열이 들어오면 예외가 발생하게 됩니다. 이전에 만들어둔 코드는 <code class=\"language-text\">date()</code> 라는 <strong>record의 getter</strong>를 사용하는데, <code class=\"language-text\">getDate()</code>라는 LocalDate를 반환하는 별도의 getter를 만든 뒤 이를 사용하게 하도록 수정하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonIgnore</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> date\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>조금 더 꼼꼼하게 하려면, 위와 같이 <code class=\"language-text\">@JsonIgnore</code> 도 적용할 수 있겠네요. 하지만 요청 객체이기 때문에 크게 의미가 없어 저는 적용하지 않았습니다!</p>\n<h3 id=\"확인\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9D%B8\" aria-label=\"확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확인</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 요청</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"memberId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"멤버 선택\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"themeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"테마 선택\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"timeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"시간 선택\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 응답</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"BAD_REQUEST\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"테마를 선택해주세요, 회원을 선택해주세요, 시간을 선택해주세요, 날짜가 입력되지 않았거나, 입력 형식이 올바르지 않아요(yyyy-MM-dd)\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 값을 선택하지 않고 요청을 보냈고, 응답은 위와 같이 입력되지 않은 모든 필드에 대한 메시지를 출력하는 것을 확인할 수 있습니다. 이렇게 해서 2번 문제도 해결했습니다.</p>\n<h2 id=\"두-번째-방법---custom-deserializer-내부에서-해결\" style=\"position:relative;\"><a href=\"#%EB%91%90-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95---custom-deserializer-%EB%82%B4%EB%B6%80%EC%97%90%EC%84%9C-%ED%95%B4%EA%B2%B0\" aria-label=\"두 번째 방법   custom deserializer 내부에서 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 번째 방법 - Custom Deserializer 내부에서 해결</h2>\n<h3 id=\"이전-첫-번째-방법에서의-문제\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C%EC%9D%98-%EB%AC%B8%EC%A0%9C\" aria-label=\"이전 첫 번째 방법에서의 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전 첫 번째 방법에서의 문제</h3>\n<p>이 방법으로 간단하게 해결할 수 있었지만, <strong>Deserializer와 요청 DTO간의 의존이 커지기도 했고,</strong>(AdminReservationCreateRequest에 있는 어노테이션 자체가 Deserializer의 반환값에 의존하기 때문)</p>\n<p>문제라고 생각하진 않지만 <strong>날짜를 입력하지 않은 경우와 형식이 잘못된 경우를 하나로 묶어서 처리해야</strong> 합니다.</p>\n<p>따라서 코드가 복잡해지더라도 <strong>Deserializer 내부에서 모든 예외를 처리하는 것이 더 올바른 방법</strong>이라고 생각하고, 이번에는 이 방법으로 문제를 해결해 보겠습니다.</p>\n<h3 id=\"시작하기-전에\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90\" aria-label=\"시작하기 전에 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기 전에</h3>\n<p>커스텀 예외를 만들어서 별도로 처리할 수 있지만, 이번에는 예시이므로 <code class=\"language-text\">IllegalArgumentException</code> 으로 예외를 처리하겠습니다.</p>\n<h3 id=\"custom-deserializer-구현\" style=\"position:relative;\"><a href=\"#custom-deserializer-%EA%B5%AC%ED%98%84\" aria-label=\"custom deserializer 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Deserializer 구현</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">AdminReservationCreateRequest</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParser</span> jsonParser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeserializationContext</span> deserializationContext<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JacksonException</span> <span class=\"token punctuation\">{</span>\n          \n   <span class=\"token class-name\">JsonNode</span> rootNode <span class=\"token operator\">=</span> jsonParser<span class=\"token punctuation\">.</span><span class=\"token function\">getCodec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>jsonParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token class-name\">String</span> date <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n   <span class=\"token class-name\">Long</span> memberId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Long</span> themeId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"themeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Long</span> timeId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t \n\t <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> errorMessages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token function\">validateAllFields</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">,</span> themeId<span class=\"token punctuation\">,</span> timeId<span class=\"token punctuation\">,</span> errorMessages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t \n\t <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우선, 이전과 같이 값을 불러오는 코드는 동일합니다. 여기에 추가적으로 예외 메시지를 담을 리스트를 생성하여 <code class=\"language-text\">validateAllFields</code>에 모든 필드와 함께 넣습니다.</p>\n<p>(더 좋은 방법이 지금은 떠오르지 않네요 ㅎㅎ.. 혹시라도 다른 방법이 있다면 의견 주시면 너무 감사하겠습니다)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateAllFields</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> memberId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> themeId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> errorMessages<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">validateDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> errorMessages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memberId <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        errorMessage<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"회원을 선택해 주세요\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>themeId <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        errorMessage<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"테마를 선택해 주세요\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeId <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        errorMessage<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"시간을 선택해 주세요\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">validateAllFields</code>는 <code class=\"language-text\">validateDate</code> 에 날짜 문자열과 예외 메시지를 담을 리스트를 넣어 날짜에 대해 먼저 확인하고, ID 값이 올바른지 확인합니다. <code class=\"language-text\">memberId == 0L</code> 과 같이 검증해도 충분하지만 유효한 ID값은 1 이상이기에, <strong>0 이하이면 값이 선택되지 않은 것이라고 판단합니다</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> errorMessages<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        errorMessages<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"날짜를 선택해 주세요\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISO_LOCAL_DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        errorMessages<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"날짜는 yyyy-MM-dd 형식으로 입력해 주세요\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">validateDate</code> 에서는 두 가지를 검증합니다. 이전의 첫 번째 방법과 달리, <strong>입력되지 않은 경우와 형식이 올바르지 않은 경우를 따로 처리</strong>합니다.</p>\n<h3 id=\"정상-입력의-경우\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%83%81-%EC%9E%85%EB%A0%A5%EC%9D%98-%EA%B2%BD%EC%9A%B0\" aria-label=\"정상 입력의 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정상 입력의 경우</h3>\n<p>validateAllFields가 호출되면, 값이 올바르지 않은 경우 errorMessages 리스트에 메시지를 추가합니다. 따라서 이 리스트가 비어있다면 모든 값이 정상적으로 입력되었다고 생각할 수 있습니다.</p>\n<ul>\n<li>입력된 ID에 대한 시간,테마,회원 등이 존재하는지는 Service에서 검증하기에, 1 이상의 숫자이면 정상적으로 입력된 것이라 판단합니다.</li>\n<li>날짜의 경우, “yyyy-MM-dd” 형식인 LocalDate 타입으로 파싱할 수 있으면 정상적으로 입력된 것이라 판단합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">AdminReservationCreateRequest</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParser</span> jsonParser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeserializationContext</span> deserializationContext<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JacksonException</span> <span class=\"token punctuation\">{</span>\n          \n\t <span class=\"token class-name\">JsonNode</span> rootNode <span class=\"token operator\">=</span> jsonParser<span class=\"token punctuation\">.</span><span class=\"token function\">getCodec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>jsonParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token class-name\">String</span> date <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n   <span class=\"token class-name\">Long</span> memberId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Long</span> themeId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"themeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Long</span> timeId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n\t <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> errorMessages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token function\">validateAllFields</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">,</span> themeId<span class=\"token punctuation\">,</span> timeId<span class=\"token punctuation\">,</span> errorMessages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t \n\t \n\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">,</span> timeId<span class=\"token punctuation\">,</span> themeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">}</span>\n\t <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서, 이 경우에는 <code class=\"language-text\">AdminReservationCreateRequest</code> 객체를 생성하여 바로 반환합니다.</p>\n<h3 id=\"정상-입력이-아닌-경우\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%83%81-%EC%9E%85%EB%A0%A5%EC%9D%B4-%EC%95%84%EB%8B%8C-%EA%B2%BD%EC%9A%B0\" aria-label=\"정상 입력이 아닌 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정상 입력이 아닌 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">AdminReservationCreateRequest</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParser</span> jsonParser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeserializationContext</span> deserializationContext<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JacksonException</span> <span class=\"token punctuation\">{</span>\n          \n\t <span class=\"token class-name\">JsonNode</span> rootNode <span class=\"token operator\">=</span> jsonParser<span class=\"token punctuation\">.</span><span class=\"token function\">getCodec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>jsonParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token class-name\">String</span> date <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n   <span class=\"token class-name\">Long</span> memberId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Long</span> themeId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"themeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Long</span> timeId <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n\t <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> errorMessages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token function\">validateAllFields</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">,</span> themeId<span class=\"token punctuation\">,</span> timeId<span class=\"token punctuation\">,</span> errorMessages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t \n\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">,</span> timeId<span class=\"token punctuation\">,</span> themeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">}</span>\n\t \n\t <span class=\"token class-name\">String</span> combinedMessage <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> errorMessages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>combinedMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>String.join을 이용해 리스트 안의 모든 메시지를 합친 뒤 예외를 던집니다.</p>\n<h3 id=\"요청-dto-수정\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%B2%AD-dto-%EC%88%98%EC%A0%95\" aria-label=\"요청 dto 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요청 DTO 수정</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonDeserialize</span><span class=\"token punctuation\">(</span>using <span class=\"token operator\">=</span> <span class=\"token class-name\">AdminReservationCreateRequestDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">AdminReservationCreateRequest</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">String</span> date<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Long</span> timeId<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Long</span> themeId\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 Deserializer에서 검증을 하게 되면, DTO에는 별도의 어노테이션을 넣지 않아도 됩니다.</p>\n<h3 id=\"확인-1\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9D%B8-1\" aria-label=\"확인 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확인</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 모든 필드를 입력하지 않고 요청</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"memberId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"멤버 선택\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"themeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"테마 선택\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"timeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"시간 선택\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 모든 필드를 입력하지 않을 때의 응답</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"BAD_REQUEST\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"날짜가 선택되지 않았습니다, 회원이 선택되지 않았습니다, 테마가 선택되지 않았습니다, 시간이 선택되지 않았습니다\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 다른 필드는 입력하지 않고, 날짜는 형식을 다르게 입력하여 요청</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20240620\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"memberId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"멤버 선택\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"themeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"테마 선택\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"timeId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"시간 선택\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 날짜 형식이 올바르지 않을 때의 응답</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"BAD_REQUEST\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"날짜 형식이 올바르지 않습니다, 회원이 선택되지 않았습니다, 테마가 선택되지 않았습니다, 시간이 선택되지 않았습니다\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>응답 결과가 예상한 것과 동일하게 나온 것을 확인할 수 있습니다😄</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ol>\n<li>해결해야 할 문제는 <strong>클라이언트 코드에서 반환하는 값에 의존하는 것과, 여러 필드에서 예외가 발생했을 때 예외가 발생한 필드에 대한 메시지를 한 번에 응답하지 못하는 것</strong>이었습니다.</li>\n<li>첫 번째 방법에선, <strong>Custom Deserializer와 @Valid</strong>를 함께 이용하여 해결합니다. 이 방법은 <strong>코드가 훨씬 이해하기 쉽고 간결하다는 장점이 있지만, DTO와 역직렬화 객체 간의 의존이 커지는 문제</strong>가 있었습니다.</li>\n<li>그래서 두 번째 방법에선 <strong>Custom Deserializer 내부에서 확인</strong>합니다. 구현 방식이 크게 마음에 드는 것은 아니지만, 의존을 제거할 수 있다는 큰 장점이 있었습니다.</li>\n</ol>\n<p>드디어 길고긴 예외 처리가 마무리 되었네요. 1편부터 지금까지의 전체 흐름을 다시 정리해 보겠습니다.</p>\n<ol>\n<li>현재 요청은 예약 추가, 테마 추가, 시간 추가로 구성되어 있습니다. 1편에서는 발생되는 예외 타입을 확인하고 테마 추가, 시간 추가에서 발생하는 @Valid 어노테이션에 의한 MethodArgumentNotValidException을 처리합니다.</li>\n<li>하지만, 예약 추가의 경우 날짜와 ID에서 발생하는 예외 타입이 달라서 처리할 수 없었습니다.</li>\n<li>2편에서는 Custom Deserializer의 사용에 필요한 JsonNode의 대략적인 구성, 사용법을 다룹니다.</li>\n<li>3편에서는 2편에 있는 내용을 바탕으로 1편에서 해결하지 못한 문제점을 해결합니다.</li>\n</ol>\n<p>최대한 맥락을 살려서 작성했다고 생각하지만, 글이 길어지다 보니 중간에 이해하기 힘든 내용이 있을 것이라고 생각합니다. 부족한 부분은 댓글에 남겨주시면 정말 감사하겠습니다.🙇</p>\n<p>부족한 글이지만 읽어주셔서 감사합니다. 즐거운 하루 보내세요😄</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%9C%EB%A1%A0\">서론</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%B4%EA%B2%B0%ED%95%B4%EC%95%BC-%ED%95%A0-%EA%B2%83\">해결해야 할 것</a></p>\n</li>\n<li>\n<p><a href=\"#custom-deserializer---%EC%A0%95%EC%83%81-%EC%9E%85%EB%A0%A5-%EC%B2%98%EB%A6%AC\">Custom Deserializer - 정상 입력 처리</a></p>\n<ul>\n<li><a href=\"#%EB%B0%B0%EA%B2%BD-%EC%9A%94%EC%B2%AD-json-%EB%B0%8F-dto\">배경: 요청 JSON 및 DTO</a></li>\n<li><a href=\"#%EC%9A%B0%EC%84%A0-%EB%AA%A8%EB%93%A0-%EA%B0%92-%EB%85%B8%EB%93%9C%EB%A5%BC-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">우선 모든 값 노드를 불러오겠습니다.</a></li>\n<li><a href=\"#%EC%A0%95%EC%83%81-%EC%9E%85%EB%A0%A5%EC%97%90-%EB%8C%80%ED%95%9C-custom-deserializer-%EB%A7%88%EB%AC%B4%EB%A6%AC\">정상 입력에 대한 Custom Deserializer 마무리</a></li>\n<li><a href=\"#%EA%B0%92%EC%9D%84-%EC%9E%85%EB%A0%A5%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4%EB%A9%B4\">값을 입력하지 않는다면?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95---valid-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%99%9C%EC%9A%A9\">첫 번째 방법 - @Valid 어노테이션 활용</a></p>\n<ul>\n<li><a href=\"#%ED%99%95%EC%9D%B8\">확인</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%91%90-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95---custom-deserializer-%EB%82%B4%EB%B6%80%EC%97%90%EC%84%9C-%ED%95%B4%EA%B2%B0\">두 번째 방법 - Custom Deserializer 내부에서 해결</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B4%EC%A0%84-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95%EC%97%90%EC%84%9C%EC%9D%98-%EB%AC%B8%EC%A0%9C\">이전 첫 번째 방법에서의 문제</a></li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90\">시작하기 전에</a></li>\n<li><a href=\"#custom-deserializer-%EA%B5%AC%ED%98%84\">Custom Deserializer 구현</a></li>\n<li><a href=\"#%EC%A0%95%EC%83%81-%EC%9E%85%EB%A0%A5%EC%9D%98-%EA%B2%BD%EC%9A%B0\">정상 입력의 경우</a></li>\n<li><a href=\"#%EC%A0%95%EC%83%81-%EC%9E%85%EB%A0%A5%EC%9D%B4-%EC%95%84%EB%8B%8C-%EA%B2%BD%EC%9A%B0\">정상 입력이 아닌 경우</a></li>\n<li><a href=\"#%EC%9A%94%EC%B2%AD-dto-%EC%88%98%EC%A0%95\">요청 DTO 수정</a></li>\n<li><a href=\"#%ED%99%95%EC%9D%B8-1\">확인</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n<ul>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 20, 2024","title":"스프링 입력에서의 예외 처리 여정 3 - Custom Deserializer","categories":"level2 Spring Exception","author":"이상진","emoji":"🌱"},"fields":{"slug":"/woowacourse/level2/스프링_입력에서의_예외_처리_여정/3/"}},"prev":{"id":"075b2fb9-6552-54c3-b7fc-efa15a13cc26","html":"<h2 id=\"배경\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BD\" aria-label=\"배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배경</h2>\n<p><a href=\"https://github.com/woowacourse/spring-roomescape-waiting/pull/30\">우아한테크코스의 세 번째 스프링 미션</a>을 진행하며 코드 리뷰를 받던 도중 리뷰어께서 좋은 의견을 공유해 주셨습니다. 의견은 기존의 <code class=\"language-text\">@JsonFormat</code>을 중복해서 사용하는 코드를 ObjectMapper를 만들어 해결하는 것이었는데요, 여기에 더해서, 미션을 하며 그냥 대략적으로만 알고 사용했던 @JsonFormat에 대해서도 알아보는 과정을 기록하고자 합니다.</p>\n<h2 id=\"jsonformat-이란\" style=\"position:relative;\"><a href=\"#jsonformat-%EC%9D%B4%EB%9E%80\" aria-label=\"jsonformat 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@JsonFormat 이란?</h2>\n<p><a href=\"https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-annotations/2.9.8/com/fasterxml/jackson/annotation/JsonFormat.html\">공식 문서</a>에 따르면, JsonFormat을 다음과 같이 설명합니다.</p>\n<blockquote>\n<p>General-purpose annotation used for configuring details of how values of properties are to be serialized. Unlike most other Jackson annotations, annotation does not have specific universal interpretation: instead, effect depends on datatype of property being annotated (or more specifically, deserializer and serializer being used)</p>\n</blockquote>\n<p>JsonFormat이라는 이름과 맨 앞부분의 설명만 보면, <code class=\"language-text\">직렬화 할 때 형식을 지정하는데 사용하는 구나~</code> 정도는 알 수 있겠네요. 미션을 진행하는 도중에는 그냥 이정도 까지만 알고 사용했는데, 그러다 보니 사용할 때 마다 찝찝함이 남더라구요. 다음 문단부터는 JsonFormat이 어떻게 적용되는지 확인해 보겠습니다.</p>\n<h2 id=\"사용할-코드\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%BD%94%EB%93%9C\" aria-label=\"사용할 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용할 코드</h2>\n<p><strong>Entity &#x26; Repository</strong></p>\n<p>DB는 Spring Data JPA와 h2를 사용했습니다. 이번 테스트에 사용할 Entity와 Repository 코드는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token class-name\">AccessLevel</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROTECTED</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> manufactureDate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalTime</span> manufactureTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span> manufactureDate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalTime</span> manufactureTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manufactureDate <span class=\"token operator\">=</span> manufactureDate<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manufactureTime <span class=\"token operator\">=</span> manufactureTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>요청 DTO</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ProductSaveRequest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">LocalDate</span> manufactureDate<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">LocalTime</span> manufactureTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span> <span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> manufactureDate<span class=\"token punctuation\">,</span> manufactureTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>데이터 저장 요청시 사용하는 DTO 객체입니다.</p>\n<p><strong>응답 DTO</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ProductResponse</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">LocalDate</span> manufactureDate<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">LocalTime</span> manufactureTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ProductResponse</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductResponse</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getManufactureDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getManufactureTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>데이터 저장 / 조회 등 상품 데이터 반환 시 사용하는 DTO 객체입니다.</p>\n<p><strong>컨트롤러</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/products\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProductRepository</span> productRepository<span class=\"token punctuation\">;</span> \n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProductResponse</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> productRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ProductResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProductResponse</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">ProductSaveRequest</span> productSaveRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> productSaveRequest<span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ProductResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>productRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span>\n    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단한 <code class=\"language-text\">저장 / 조회 기능</code>과 Stacktrace 출력을 위한 ExceptionHandler로 구성했습니다.</p>\n<p>다음 문단부터는 이 코드들을 이용하여 <code class=\"language-text\">@JsonFormat</code>에 대해 확인해 보겠습니다.</p>\n<h2 id=\"jsonformat---역직렬화\" style=\"position:relative;\"><a href=\"#jsonformat---%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94\" aria-label=\"jsonformat   역직렬화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JsonFormat - 역직렬화</h2>\n<p>우선 요청 데이터를 객체로 역직렬화 하는 방법부터 확인해 보겠습니다. 형식은 가장 일반적으로 쓰이는 yyyy-MM-dd와 HH:mm:ss를 이용하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ProductSaveRequest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@JsonFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">LocalDate</span> manufactureDate<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@JsonFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"HH:mm:ss\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">LocalTime</span> manufactureTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"정상-테스트\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%83%81-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"정상 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정상 테스트</h3>\n<p>위에서 지정한 JsonFormat에 맞춰, 정상적인 요청을 보내는 테스트를 진행해 보겠습니다. 응답 상태코드는 컨트롤러에서 별도로 지정하지 않았기에 200으로 확인합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> 정확한_형식으로_요청<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> params <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"상품1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureDate\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2024-06-25\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12:34:56\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/products\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"날짜만-다른-형식으로-테스트\" style=\"position:relative;\"><a href=\"#%EB%82%A0%EC%A7%9C%EB%A7%8C-%EB%8B%A4%EB%A5%B8-%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"날짜만 다른 형식으로 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>날짜만 다른 형식으로 테스트</h3>\n<p>정상적인 요청에 대한 테스트는 성공합니다. 그러면 이번에는 날짜만 JsonFormat으로 지정한 값과 다른 형식으로 테스트를 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> 날짜만_다른_형식으로_요청<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> params <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"상품1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureDate\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2024/06/25\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12:34:56\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// RestAssured는 전과 동일</span>\n\t  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 테스트는 실패하였습니다. 이전에 ExceptionHandler에서 Stacktrace를 출력하도록 해놨으니, 한번 확인해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>converter<span class=\"token punctuation\">.</span></span>HttpMessageNotReadableException</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span> parse error<span class=\"token operator\">:</span> <span class=\"token class-name\">Cannot</span> deserialize value of type `<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span>LocalDate</span>` from <span class=\"token class-name\">String</span> <span class=\"token string\">\"2024/06/25\"</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Failed</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">deserialize</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span>LocalDate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeParseException</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Text</span> '<span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">25</span>' could not be parsed at index <span class=\"token number\">4</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Caused</span> by<span class=\"token operator\">:</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeParseException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span> '<span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">25</span>' could not be parsed at index <span class=\"token number\">4</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseResolved0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">2052</span><span class=\"token punctuation\">)</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1954</span><span class=\"token punctuation\">)</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span>LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">430</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>datatype<span class=\"token punctuation\">.</span>jsr310<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>LocalDateDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">_fromString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateDeserializer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">176</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">63</span> more\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>이전에 예외 처리에서 알아본 대로, HttpMessageNotReadable 에러가 발생하고 그 원인으로 DateTimeParseException이 발생하네요. 더 자세히 보면 <code class=\"language-text\">LocalDateDeserializer</code>의 <code class=\"language-text\">_fromString</code> , 즉 문자열을 LocalDate 형식으로 변환하는 과정에서 발생하는 것을 알 수 있었습니다.</p>\n<h3 id=\"시간만-다른-형식으로-테스트\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84%EB%A7%8C-%EB%8B%A4%EB%A5%B8-%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"시간만 다른 형식으로 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시간만 다른 형식으로 테스트</h3>\n<p>전에 했던 날짜와 동일하게, 날짜는 yyyy-MM-dd의 형식으로, 시간은 JsonFormat에서 지정한 형식과 다르게 지정하여 테스트를 진행하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Caused</span> by<span class=\"token operator\">:</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeParseException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span> '<span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">34</span><span class=\"token operator\">/</span><span class=\"token number\">56</span>' could not be parsed at index <span class=\"token number\">2</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseResolved0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">2052</span><span class=\"token punctuation\">)</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span>DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1954</span><span class=\"token punctuation\">)</span>\n\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span>LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">465</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>datatype<span class=\"token punctuation\">.</span>jsr310<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>LocalTimeDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">_fromString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTimeDeserializer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">193</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">63</span> more</code></pre></div>\n<p>예외는 동일하게 발생했는데, 이번에는 LocalTimeDeserializer에서 발생했습니다.</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>역직렬화시 <code class=\"language-text\">@JsonFormat</code> 으로 지정한 형식과 다르면 날짜 / 시간을 변환하는 과정에서 예외가 발생합니다.</p>\n<h2 id=\"jsonformat을-안-붙인다면\" style=\"position:relative;\"><a href=\"#jsonformat%EC%9D%84-%EC%95%88-%EB%B6%99%EC%9D%B8%EB%8B%A4%EB%A9%B4\" aria-label=\"jsonformat을 안 붙인다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@JsonFormat을 안 붙인다면?</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalDateDeserializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JSR310DateTimeDeserializerBase</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DateTimeFormatter</span> <span class=\"token constant\">DEFAULT_FORMATTER</span><span class=\"token punctuation\">;</span>\n\t\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  \n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">DEFAULT_FORMATTER</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISO_LOCAL_DATE</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalTimeDeserializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JSR310DateTimeDeserializerBase</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DateTimeFormatter</span> <span class=\"token constant\">DEFAULT_FORMATTER</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">DEFAULT_FORMATTER</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISO_LOCAL_TIME</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에 예외를 확인하는 과정에서 LocalDateDeserializer와 LocalTimeDeserializer 소스코드를 확인해 봤는데, 소스코드를 보면 DEFAULT_FORMATTER라는 값이 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">LocalDate</code>의 경우 <code class=\"language-text\">ISO_LOCAL_DATE</code>이고, 이는 <code class=\"language-text\">“yyyy-MM-dd”</code> 형식을 나타냅니다.</li>\n<li><code class=\"language-text\">LocalTime</code>의 경우 <code class=\"language-text\">ISO_LOCAL_TIME</code>이고, 이는 <code class=\"language-text\">“HH:mm:ss”</code> 또는 <code class=\"language-text\">“HH:mm”</code> 형식입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JSR310DateTimeDeserializerBase</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JSR310DeserializerBase</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ContextualDeserializer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DateTimeFormatter</span> _formatter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>추가적으로, LocalDateDeserializer, LocalTimeDeserializer의  부모 클래스인 JSR310..을 보면, <strong>_formatter</strong> 필드가 있네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalDateDeserializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JSR310DateTimeDeserializerBase</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DateTimeFormatter</span> <span class=\"token constant\">DEFAULT_FORMATTER</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">LocalDateDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_FORMATTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalDateDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span> dtf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> dtf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러면, LocalDateDeserializer의 생성자를 보니 다음을 유추할 수 있을 것 같습니다. (<strong>LocalTime도 동일합니다.</strong>)</p>\n<ol>\n<li>@JsonFormat을 지정하지 않으면 <strong>DEFAULT_FORMATTER</strong> 값을 사용한다.</li>\n<li>@JsonFormat을 지정하면 그 값을 사용한다.</li>\n</ol>\n<h3 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h3>\n<p>그러면 DTO에서 JsonFormat을 지정하지 않아도, 날짜는 “yyyy-MM-dd”, 시간은 “HH:mm:ss” 또는 “HH:mm” 형식을 넣으면 정상적으로 작동할 것을 기대할 수 있겠네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ProductSaveRequest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">LocalDate</span> manufactureDate<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">LocalTime</span> manufactureTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드와 같이 @JsonFormat을 없애고, 이전에 했던 테스트를 다시 실행해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> 정확한_형식으로_요청<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> params <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"상품1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureDate\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2024-06-25\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12:34:56\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/products\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트는 정상적으로 통과하고, 여기서 시간은 “12:34”로 입력해도 마찬가지로 잘 통과하는 것을 확인할 수 있습니다.</p>\n<h3 id=\"결론-1\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0-1\" aria-label=\"결론 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>@JsonFormat을 붙이지 않아도, <strong>날짜의 경우 “yyyy-MM-dd”, 시간의 경우 “HH:mm:ss” 또는 “HH:mm” 형식</strong>의 값을 입력하면 정상적으로 변환된다는 것입니다.</p>\n<p>더 추가적으로 확인해볼 수 있는 것은 <code class=\"language-text\">@JsonFormat</code>을 붙이지 않고 <code class=\"language-text\">\"2011-12-03T10:15:30”</code>  형식으로 JSON 요청을 보내도 정상적으로 값이 파싱되는 것이었는데요, 이 부분은 지금 단계에서는 크게 의미가 없는 것 같아 작성하지 않았습니다.(_fromString() 소스코드에서 확인할 수 있습니다)</p>\n<h2 id=\"jsonformat---직렬화\" style=\"position:relative;\"><a href=\"#jsonformat---%EC%A7%81%EB%A0%AC%ED%99%94\" aria-label=\"jsonformat   직렬화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JsonFormat - 직렬화</h2>\n<p>그러면 <code class=\"language-text\">@ResponseBody</code> 혹은 <code class=\"language-text\">@RestController</code> 를 통해 응답 JSON을 보낼 때의 경우도 확인해 보겠습니다.</p>\n<h3 id=\"jsonformat을-지정하지-않을-때\" style=\"position:relative;\"><a href=\"#jsonformat%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8C\" aria-label=\"jsonformat을 지정하지 않을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JsonFormat을 지정하지 않을 때</h3>\n<p>이전 문단에서 <code class=\"language-text\">@JsonFormat</code> 을 지정하지 않았을 때의 기본값이 있던 것 처럼, 직렬화를 할 때도 기본값이 있을 것이라고 생각할 수 있겠네요. 그래서 우선 @JsonFormat을 지정하지 않고 테스트를 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ProductResponse</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">LocalDate</span> manufactureDate<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">LocalTime</span> manufactureTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>조회 테스트를 하기 전에 저장을 해야 하는데, 이렇게 되면 코드 자체가 길어져서 <code class=\"language-text\">data.sql</code> 을 이용하여 하나의 초기 데이터를 지정하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> product<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> manufacture_date<span class=\"token punctuation\">,</span> manufacture_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2024-06-25'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'10:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트 코드는 위와 같이 RestAssured를 이용해 작성하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">JsonFormat_</span>지정_없이_응답<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/products/1\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트는 정상적으로 완료되었고, 응답 로그를 통해 응답 JSON을 확인해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"manufactureDate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024-06-25\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"manufactureTime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10:00:00\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 이전에 역직렬화를 할 때의 기본 형식과 같은 형식으로 값이 반환되었습니다. 데이터를 넣을 때 시간은 “10:00”으로 입력했는데, 값을 조회할 때는 기본 형식인 “10:00:00”으로 반환이 되네요.</p>\n<h3 id=\"jsonformat-지정\" style=\"position:relative;\"><a href=\"#jsonformat-%EC%A7%80%EC%A0%95\" aria-label=\"jsonformat 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JsonFormat 지정</h3>\n<p>아래와 같이 JsonFormat을 지정하면, 응답 JSON의 값을 해당 형식으로 표현할 것이라고 생각할 수 있겠네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ProductResponse</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@JsonFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy / MM / dd\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">LocalDate</span> manufactureDate<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@JsonFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"HH / mm\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">LocalTime</span> manufactureTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에 JsonFormat을 지정하지 않았을 때와 같은 테스트를 돌려보면, 아래와 같이 원하는 형식으로 날짜가 출력됨을 확인할 수 있었습니다😄</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"manufactureDate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024 / 06 / 25\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"manufactureTime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10 / 00\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"objectmapper-bean-등록\" style=\"position:relative;\"><a href=\"#objectmapper-bean-%EB%93%B1%EB%A1%9D\" aria-label=\"objectmapper bean 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObjectMapper Bean 등록</h2>\n<h3 id=\"배경-1\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BD-1\" aria-label=\"배경 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배경</h3>\n<p>현재 프로그램 요구사항에선 요청 / 응답 모두 날짜는 “yyyy-MM-dd”, 시간은 “HH:mm” 형식을 사용하고 있습니다. 코드를 처음 제출했을 때는 모든 LocalDate와 LocalTime에 JsonFormat을 지정했는데요, 지금까지 알아본 내용 대로라면 다음과 같이 지정해도 이전과 같이 동작할 것을 기대할 수 있겠네요.</p>\n<ol>\n<li><code class=\"language-text\">LocalDate</code>는 JsonFormat을 지정하지 않아도 된다.</li>\n<li><code class=\"language-text\">LocalTime</code>은 요청의 경우 지정하지 않아도 되고, <strong>응답의 경우만 JsonFormat을 “HH:mm”으로 지정</strong>한다.</li>\n</ol>\n<p>하지만 이 방법이 좋다고 생각하는가? 하면 아닌 것 같습니다. 코드량은 줄었지만 <strong>JsonFormat을 지정하지 않았을 때의 기본값을 모를 수도 있기 때문</strong>에 이전과 같이 <strong>하나하나 다 지정</strong>하는게 가장 좋은 방법이라고 생각하는데요, 코드의 중복을 없애면서 형식을 통일하는 방법이 있으면 참 좋을 것 같습니다.</p>\n<h3 id=\"objectmapper-등록\" style=\"position:relative;\"><a href=\"#objectmapper-%EB%93%B1%EB%A1%9D\" aria-label=\"objectmapper 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObjectMapper 등록</h3>\n<p>리뷰어께서 주신 의견을 바탕으로 구글링을 통해 <a href=\"https://www.baeldung.com/spring-boot-customize-jackson-objectmapper\">Baeldung의 글</a>을 찾았고, 이 글의 내용을 바탕으로 모든 JsonFormat을 통일해 보겠습니다. 코드는 일부 수정하였습니다.</p>\n<blockquote>\n<p>@ConfigurationProperties 또는 @Value를 사용하면 yaml을 통해 더 쉽게 관리할 수 있지만, 이번에는 사용하지 않았습니다.</p>\n</blockquote>\n<ol>\n<li><code class=\"language-text\">JavaTimeModule</code> 빈 등록</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JacksonConfig</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n  <span class=\"token annotation punctuation\">@Bean</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">JavaTimeModule</span> <span class=\"token function\">javaTimeModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JavaTimeModule</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JavaTimeModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">addSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalDateSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISO_LOCAL_DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">addDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalDateDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISO_LOCAL_DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">addSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalTimeSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">addDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalTimeDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우선, 날짜와 시간은 <code class=\"language-text\">JavaTimeModule</code> 에 serializer와 deserializer를 추가하는 방식으로 형식을 지정할 수 있습니다. 지금은 LocalDate와 LocalTime만 적용했지만, LocalDateTime 등의 타입에서도 지정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">JavaTimeModule</span> <span class=\"token function\">javaTimeModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">JavaTimeModule</span> javaTimeModule <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">JavaTimeModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    javaTimeModule<span class=\"token punctuation\">.</span><span class=\"token function\">addSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalDateSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISO_LOCAL_DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    javaTimeModule<span class=\"token punctuation\">.</span><span class=\"token function\">addDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalDateDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISO_LOCAL_DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    javaTimeModule<span class=\"token punctuation\">.</span><span class=\"token function\">addSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalTimeSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    javaTimeModule<span class=\"token punctuation\">.</span><span class=\"token function\">addDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalTimeDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> javaTimeModule<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>캐스팅이 불편하다면 위와 같이 등록해도 됩니다!</p>\n<ol start=\"2\">\n<li><code class=\"language-text\">ObjectMapper</code> 빈 등록</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JacksonConfig</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ObjectMapper</span> <span class=\"token function\">objectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerModule</span><span class=\"token punctuation\">(</span><span class=\"token function\">javaTimeModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n  <span class=\"token annotation punctuation\">@Bean</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">JavaTimeModule</span> <span class=\"token function\">javaTimeModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 이전 코드와 동일</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ObjectMapper의 <code class=\"language-text\">registerModule</code> 에 이전에 구현한 <code class=\"language-text\">JavaTimeModule</code>을 입력하면 됩니다.</p>\n<h3 id=\"테스트-1\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-1\" aria-label=\"테스트 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h3>\n<p>위와 같이 ObjectMapper를 등록했다면, 기존에 LocalDate및 LocalTime에 붙은 모든 JsonFormat을 지울 수 있습니다. 모든 JsonFormat을 지운 뒤, 테스트를 통해 정상적으로 변환되는지 확인해 보겠습니다.</p>\n<ol>\n<li>날짜에 대한 역직렬화 테스트</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ParameterizedTest</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"{0} 형식의 날짜에 대한 역직렬화 요청시 {1} 코드를 반환한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@CsvSource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"2024-06-25 , 200\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2024/06/25 , 400\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delimiter <span class=\"token operator\">=</span> <span class=\"token char\">','</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">date_deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> expectedStatusCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> body <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureDate\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12:30\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/products\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span>expectedStatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에 컨트롤러 코드에서, 예외 발생시 400 응답을 하도록 ExceptionHandler를 정의하였기에 올바르지 않은 형식의 날짜로 요청을 하면 400 응답이 발생해야 합니다.</p>\n<ol start=\"2\">\n<li>시간에 대한 역직렬화 테스트</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ParameterizedTest</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"{0} 형식의 시간에 대한 역직렬화 요청시 {1} 코드를 반환한다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@CsvSource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"12:30 , 200\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12:30:00 , 400\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12/30, 400\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delimiter <span class=\"token operator\">=</span> <span class=\"token char\">','</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">time_deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> time<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> expectedStatusCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> body <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureDate\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2024-06-25\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"manufactureTime\"</span><span class=\"token punctuation\">,</span> time\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/products\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span>expectedStatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>날짜의 경우와 거의 동일하고, @JsonFormat을 지정하지 않았다면 “12:30:00”도 정상적으로 변환이 되어야 하지만 형식을 “HH:mm”으로 지정하였기에 예외가 발생하는 것을 확인할 수 있습니다.</p>\n<ol start=\"3\">\n<li>직렬화 테스트</li>\n</ol>\n<p>편의를 위해 data.sql에 다음과 같은 데이터를 추가하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> product<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> manufacture_date<span class=\"token punctuation\">,</span> manufacture_time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2024-06-25'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'10:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>날짜의 경우 기본값과 같기 때문에 크게 의미가 없으나, 시간은 기본값이 <code class=\"language-text\">“HH:mm:ss”</code> 이기 때문에 <code class=\"language-text\">“HH:mm”</code> 으로 직렬화 되는지 확인하는 것이 중요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"날짜는 yyyy-MM-dd 형식으로 직렬화된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">date_serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/products/1\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"manufactureDate\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2024-06-25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"시간은 HH:mm 형식으로 직렬화된다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">time_serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/products/1\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"manufactureTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"결론-2\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0-2\" aria-label=\"결론 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ol>\n<li>JsonFormat을 지정하지 않는 경우\n<ul>\n<li>LocalDate는 “yyyy-MM-dd” 형식이 기본값이다.</li>\n<li>LocalTime은 역직렬화시 “HH:mm:ss” 또는 “HH:mm”, 직렬화시 “HH:mm:ss” 가 기본값이다.</li>\n</ul>\n</li>\n<li>역직렬화시 JsonFormat을 지정하면, 요청 JSON의 값 형식은 지정한 형식과 동일해야 한다.</li>\n<li>직렬화시 JsonFormat을 지정하면, 응답 JSON의 값이 지정한 형식으로 표현된다.</li>\n<li>Custom ObjectMapper를 통해 JsonFormat의 코드 중복을 없앨 수 있다.</li>\n</ol>\n<p>분명 구현하고 테스트할때는 간단했는데, 이게 글로 작성하자니 참 오래 걸리고 길어졌네요. 그래도 드디어 항상 의문을 가지던 JsonFormat에 대해 이해한 것 같아 즐거운 과정이었다고 생각합니다. 잘못된 정보나 의견이 있으시면 편하게 부탁드립니다.</p>\n<p>읽어주셔서 감사합니다. 즐거운 하루 보내세요🙇</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B0%B0%EA%B2%BD\">배경</a></p>\n</li>\n<li>\n<p><a href=\"#jsonformat-%EC%9D%B4%EB%9E%80\">@JsonFormat 이란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%BD%94%EB%93%9C\">사용할 코드</a></p>\n</li>\n<li>\n<p><a href=\"#jsonformat---%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94\">JsonFormat - 역직렬화</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EC%83%81-%ED%85%8C%EC%8A%A4%ED%8A%B8\">정상 테스트</a></li>\n<li><a href=\"#%EB%82%A0%EC%A7%9C%EB%A7%8C-%EB%8B%A4%EB%A5%B8-%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\">날짜만 다른 형식으로 테스트</a></li>\n<li><a href=\"#%EC%8B%9C%EA%B0%84%EB%A7%8C-%EB%8B%A4%EB%A5%B8-%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\">시간만 다른 형식으로 테스트</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#jsonformat%EC%9D%84-%EC%95%88-%EB%B6%99%EC%9D%B8%EB%8B%A4%EB%A9%B4\">@JsonFormat을 안 붙인다면?</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\">테스트</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0-1\">결론</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#jsonformat---%EC%A7%81%EB%A0%AC%ED%99%94\">JsonFormat - 직렬화</a></p>\n<ul>\n<li><a href=\"#jsonformat%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8C\">JsonFormat을 지정하지 않을 때</a></li>\n<li><a href=\"#jsonformat-%EC%A7%80%EC%A0%95\">JsonFormat 지정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#objectmapper-bean-%EB%93%B1%EB%A1%9D\">ObjectMapper Bean 등록</a></p>\n<ul>\n<li><a href=\"#%EB%B0%B0%EA%B2%BD-1\">배경</a></li>\n<li><a href=\"#objectmapper-%EB%93%B1%EB%A1%9D\">ObjectMapper 등록</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-1\">테스트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0-2\">결론</a></p>\n<ul>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 26, 2024","title":"날짜와 시간의 직렬화 & 역직렬화 시도 - JsonFormat, ObjectMapper","categories":"level2 Spring JsonFormat ObjectMapper","author":"이상진","emoji":"🌱"},"fields":{"slug":"/woowacourse/level2/날짜와_시간_직렬화_및_역직렬화/"}},"site":{"siteMetadata":{"siteUrl":"https://pricelees.github.io","comments":{"utterances":{"repo":"pricelees/pricelees.github.io"}}}}},"pageContext":{"slug":"/woowacourse/level2/Interceptor를_이용한_권한_구분/","nextSlug":"/woowacourse/level2/스프링_입력에서의_예외_처리_여정/3/","prevSlug":"/woowacourse/level2/날짜와_시간_직렬화_및_역직렬화/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}